<?php

class Application_Model_Ticket {
	private $sDb;

	function __construct() {
		$this->sDb = Zend_Registry::get('DB');
	}

	function getAll($strTicketCategoryID, $strBranchID) {
		$strSQL = "SELECT * FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID'";
		//echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetchAll();
		return $res;
	}

	function getAllQueuing($strTicketCategoryID, $strBranchID) {
		$strSQL = "SELECT * FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID' AND Status = 'queued'";
		//echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetchAll();
		return $res;
	}

	function getAllQueuingByTransfered($strTicketCategoryID, $strBranchID, $blnTransfered, $strStatus) {
		$strSQL = "SELECT * FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID' AND Status = '$strStatus' AND Transfered = '$blnTransfered'";
		//echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetchAll();
		return $res;
	}

	function getTotalQueuing($strTicketCategoryID, $strBranchID) {
		$strSQL = "SELECT COUNT(*) AS TotalQueue FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID' AND Status = 'queued'";
		//echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetchAll();
		//var_dump($res);
		return $res[0]["TotalQueue"];
	}

	function getAllPostponed($strTicketCategoryID, $strBranchID, $strCounterNo) {
		$strSQL = "SELECT * FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID' AND CounterNo = '$strCounterNo' AND Status = 'postponed' AND Transfered = 'no'";
		//echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetchAll();
		return $res;
	}

	function getAllCalled($strBranchID) {
		$strSQL = "SELECT * FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND BranchID = '$strBranchID' AND Status = 'called'";
		//echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetchAll();
		return $res;
	}

	function getSingle($strTicketID) {
		$strSQL = "SELECT * FROM trn_ticketing WHERE TicketID = '$strTicketID'";
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetch();
		return $res;
	}

	function getSingleByTicketID($strTicketID = "", $strTicketCategoryID, $strBranchID, $strStatus) {
	    if ($strTicketID) {
	        $strSQL = "SELECT TicketID, TicketNo FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID' AND Status = '$strStatus' AND TicketID = '$strTicketID'";
	    } else {
	        $strSQL = "SELECT TicketID, TicketNo FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND TicketCategoryID = '$strTicketCategoryID' AND BranchID = '$strBranchID' AND Status = '$strStatus' ORDER BY TicketNo ASC LIMIT 1";
	    }
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetch();
		return $res;
	}

	function getSingleByBranchIDByCounterNoByStatus($strBranchID, $strCounterNo, $strStatus) {
        $strSQL = "SELECT TicketID, TicketNo, CalledDate, Status FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND BranchID = '$strBranchID' AND CounterNo = '$strCounterNo' AND Status = '$strStatus'";
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetch();
		return $res;
	}

	function getLastSingleByBranchIDByCounterNo($strBranchID, $strCounterNo) {
        $strSQL = "SELECT TicketID, TicketNo, FinishDate FROM trn_ticketing WHERE CreateDate BETWEEN '" . date("Y-m-d") . " 00:00:01' AND '" . date("Y-m-d") . " 23:59:59' AND BranchID = '$strBranchID' AND CounterNo = '$strCounterNo' AND Status = 'finished' ORDER BY FinishDate DESC LIMIT 1";
        //echo $strSQL;
		$stmt = $this->sDb->query($strSQL);
		$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
		$res = $stmt->fetch();
		return $res;
	}

	function insert($strBranchID, $strTicketCategoryID, $strDate, $strTime) {
	    // Get ticket category range based on TicketCategoryID
	    $strSQL = "SELECT TicketRangeFrom, TicketRangeUntil FROM mst_ticket_category WHERE TicketCategoryID = '$strTicketCategoryID'";
        $stmt = $this->sDb->query($strSQL);
        $stmt->setFetchMode(Zend_Db::FETCH_BOTH);
        $res = $stmt->fetch();
        $intTicketRangeFrom  = $res["TicketRangeFrom"];
        $intTicketRangeUntil = $res["TicketRangeUntil"];

        // Get latest ticket no
        $strSQL = "SELECT TicketNo FROM trn_ticketing WHERE
                BranchID = '$strBranchID'
                AND TicketNo >= '$intTicketRangeFrom' AND TicketNo <= '$intTicketRangeUntil'
                AND CreateDate >= '" . date("Y-m-d") . " 00:00:01'
                ORDER BY TicketID DESC LIMIT 1";
        echo $strSQL;
        $stmt = $this->sDb->query($strSQL);
        $stmt->setFetchMode(Zend_Db::FETCH_BOTH);
        $res = $stmt->fetch();
        //var_dump($res);
	    $intLastNo = $res['TicketNo'];
	    if (!$intLastNo or $intLastNo < $intTicketRangeFrom) $intLastNo = $intTicketRangeFrom - 1;

	    // Create new ticket no based on last ticket no or ticket range
	    if ($intLastNo >= $intTicketRangeUntil) {
            $intTicketNo = $intTicketRangeFrom;
	    } else {
	        $intTicketNo = $intLastNo + 1;
	    }

        $strSQL = "INSERT INTO trn_ticketing (TicketNo, TicketCategoryID, BranchID, CreateDate) VALUES ('$intTicketNo', '$strTicketCategoryID', '$strBranchID', '$strDate $strTime')";
        //echo $strSQL;
        $stmt = $this->sDb->query($strSQL);
        return $this->sDb->lastInsertId();
        //return $strSQL;
	}


	function update($strTicketID, $strBranchName) {
        $strSQL = "UPDATE trn_ticketing SET BranchName = '$strBranchName' WHERE TicketID = '$strTicketID'";
        $stmt = $this->sDb->query($strSQL);
	}

	function updateCalledDate($strTicketID, $strCounterNo, $strTime) {
        $strSQL = "UPDATE trn_ticketing SET CalledDate = '$strTime', Status = 'called', CounterNo = '$strCounterNo', UserID = '{$_SESSION["UserID"]}' WHERE TicketID = '$strTicketID'";
        $stmt = $this->sDb->query($strSQL);
	}

	function updateStatusFinished($strTicketID, $strServiceType1, $strServiceType2, $strServiceType3, $strWalkinName = "", $strRelationWithCustomer = "", $strNoAgreement, $strTime) {
        $strSQL = "UPDATE trn_ticketing SET
        		Status               = 'finished',
        		FinishDate           = '$strTime',
        		ServiceType1         = '" . addslashes($strServiceType1) . "',
        		ServiceType2         = '" . addslashes($strServiceType2) . "',
        		ServiceType3         = '" . addslashes($strServiceType3) . "',
        		WalkinName           = '$strWalkinName',
        		RelationWithCustomer = '$strRelationWithCustomer',
        		NoAgreement          = '$strNoAgreement'
        		WHERE TicketID = '$strTicketID'";
        $stmt = $this->sDb->query($strSQL);
	}

	function updateStatusPostponed($strTicketID) {
        $strSQL = "UPDATE trn_ticketing SET Status = 'postponed' WHERE TicketID = '$strTicketID'";
        $stmt = $this->sDb->query($strSQL);
	}

	function updateTransfered($strTicketID, $strTicketCategoryID, $intTransferNo) {
        $strSQL = "UPDATE trn_ticketing SET TicketCategoryID = '$strTicketCategoryID', TransferNo = '$intTransferNo', Transfered = 'yes', Status = 'queued' WHERE TicketID = '$strTicketID'";
        $stmt = $this->sDb->query($strSQL);
	}

	function delete($strTicketID) {
        $strSQL = "DELETE FROM trn_ticketing WHERE TicketID = '$strTicketID'";
        $stmt = $this->sDb->query($strSQL);
	}

	function getDataTable() {
	    $sTable   = "trn_ticketing";
	    $aColumns = array( 'TicketID', 'BranchName');
	    $sIndexColumn = "TicketID";

        /*
    	 * Paging
    	 */
    	$sLimit = "";
    	if ( isset( $_POST['iDisplayStart'] ) && $_POST['iDisplayLength'] != '-1' ){
    		$sLimit = "LIMIT ".addslashes( $_POST['iDisplayStart'] ).", " . addslashes( $_POST['iDisplayLength'] );

    	}
        //echo $sLimit;exit;

    	/*
    	 * Ordering
    	 */
    	$sOrder = "";
    	if ( isset( $_POST['iSortCol_0'] ) )
    	{
    		$sOrder = "ORDER BY  ";
    		for ( $i=0 ; $i<intval( $_POST['iSortingCols'] ) ; $i++ )
    		{
    			if ( $_POST[ 'bSortable_'.intval($_POST['iSortCol_'.$i]) ] == "true" )
    			{
    				$sOrder .= "`".$aColumns[ intval( $_POST['iSortCol_'.$i] ) ]."` ".
    				 	addslashes( $_POST['sSortDir_'.$i] ) .", ";
    			}
    		}

    		$sOrder = substr_replace( $sOrder, "", -2 );
    		if ( $sOrder == "ORDER BY" )
    		{
    			$sOrder = "";
    		}
    	}
    	//echo $sOrder;exit;


    	/*
    	 * Filtering
    	 * NOTE this does not match the built-in DataTables filtering which does it
    	 * word by word on any field. It's possible to do here, but concerned about efficiency
    	 * on very large tables, and MySQL's regex functionality is very limited
    	 */
    	$sWhere = "";
    	if ( isset($_POST['sSearch']) && $_POST['sSearch'] != "" )
    	{
    		$sWhere = "WHERE (";
    		for ( $i=0 ; $i<count($aColumns) ; $i++ )
    		{
    			$sWhere .= "`".$aColumns[$i]."` LIKE '%".addslashes( $_POST['sSearch'] )."%' OR ";
    		}
    		$sWhere = substr_replace( $sWhere, "", -3 );
    		$sWhere .= ')';
    	}
    	//echo $sWhere;exit;


    	/* Individual column filtering */
    	for ( $i=0 ; $i<count($aColumns) ; $i++ )
    	{
    		if ( isset($_POST['bSearchable_'.$i]) && $_POST['bSearchable_'.$i] == "true" && $_POST['sSearch_'.$i] != '' )
    		{
    			if ( $sWhere == "" )
    			{
    				$sWhere = "WHERE ";
    			}
    			else
    			{
    				$sWhere .= " AND ";
    			}
    			$sWhere .= "`".$aColumns[$i]."` LIKE '%".addslashes($_POST['sSearch_'.$i])."%' ";
    		}
    	}


    	/*
    	 * SQL queries
    	 * Get data to display
    	 */
    	$sQuery = "
    		SELECT SQL_CALC_FOUND_ROWS `".str_replace(" , ", " ", implode("`, `", $aColumns))."`
    		FROM   $sTable
    		$sWhere
    		$sOrder
    		$sLimit
    		";
    	//$rResult = mysql_query( $sQuery, $gaSql['link'] ) or die(mysql_error());
    	$stmt = $this->sDb->query($sQuery);
    	$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
    	$rResult = $stmt->fetchAll();
    	//echo $sQuery;exit;

    	/* Data set length after filtering */
    	$sQuery = "
    		SELECT FOUND_ROWS()
    	";
    	//$rResultFilterTotal = mysql_query( $sQuery, $gaSql['link'] ) or die(mysql_error());
    	$stmt = $this->sDb->query($sQuery);
    	$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
    	//$aResultFilterTotal = mysql_fetch_array($rResultFilterTotal);
    	$aResultFilterTotal = $stmt->fetch();
    	//$aResultFilterTotal = $stmt->fetchAll();
    	$iFilteredTotal = $aResultFilterTotal[0];
    	//echo $iFilteredTotal;exit;
    	//print_r($aResultFilterTotal);exit;

    	/* Total data set length */
    	$sQuery = "
    		SELECT COUNT(`".$sIndexColumn."`)
    		FROM   $sTable
    	";
    	//$rResultTotal = mysql_query( $sQuery, $gaSql['link'] ) or die(mysql_error());
    	//echo $sQuery;exit;
    	$stmt = $this->sDb->query($sQuery);
    	$stmt->setFetchMode(Zend_Db::FETCH_BOTH);
    	//$aResultTotal = mysql_fetch_array($rResultTotal);
    	$aResultTotal = $stmt->fetch();
    	$iTotal = $aResultTotal[0];
    	//echo $iTotal;exit;


    	/*
    	 * Output
    	 */
    	$output = array(
    		"sEcho" => intval($_POST['sEcho']),
    		"iTotalRecords" => $iTotal,
    		"iTotalDisplayRecords" => $iFilteredTotal,
    		"aaData" => array()
    	);

    	foreach ($rResult as $aRow)
    	{
    		$row = array();
    		for ( $i=0 ; $i<count($aColumns) ; $i++ )
    		{
    			if ( $aColumns[$i] == "version" )
    			{
    				/* Special output formatting for 'version' column */
    				$row[] = ($aRow[ $aColumns[$i] ]=="0") ? '-' : $aRow[ $aColumns[$i] ];
    			}
    			else if ( $aColumns[$i] != ' ' )
    			{
    				/* General output */
    				$row[] = $aRow[ $aColumns[$i] ];
    			}
    		}
    		$output['aaData'][] = $row;
    	}
	    return $output;
	}
}


?>