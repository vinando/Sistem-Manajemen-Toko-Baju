<?php

class TicketcategoryController extends Zend_Controller_Action {
    private $model;

    public function init() {
        $this->model = new Application_Model_Ticketcategory();

        $this->view->AccordionID = "Master";
        $this->view->SelectedMenu = "TicketCategory";
    }

    public function preDispatch() {
    	if (!Zend_Auth::getInstance()->hasIdentity()) {
    	    $this->_helper->redirector('login', '');
        }
    }

    public function indexAction(){
    }

    public function dataAction() {
        echo json_encode($this->model->getDataTable());
    	exit;
    }

    public function formAction(){
        switch ($this->getRequest()->getParam("type")) {
            case "add";
                $this->view->assign("strFormType", "Add");
                $this->view->assign("strID", "Automatic");
                break;

            case "edit":
                $this->view->assign("strFormType", "Edit");
                $this->view->assign("strID", $this->getRequest()->getParam("id"));

                $arrData = $this->model->getSingle($this->getRequest()->getParam("id"));

                // Set record data to form
                $this->view->assign("TicketCategoryName", $arrData['TicketCategoryName']);
                $this->view->assign("Description", strip_tags($arrData['Description']));
                $this->view->assign("ServiceLevel", $arrData['ServiceLevel']);
                $this->view->assign("TicketRangeFrom", $arrData['TicketRangeFrom']);
                $this->view->assign("TicketRangeUntil", $arrData['TicketRangeUntil']);

                break;
        }

    }

    public function saveAction() {
    	$strTicketCategoryName = addslashes($this->getRequest()->getParam("TicketCategoryName"));
    	$strDescription        = addslashes($this->getRequest()->getParam("Description"));
    	$intServiceLevel       = $this->getRequest()->getParam("ServiceLevel");
    	$intTicketRangeFrom    = $this->getRequest()->getParam("TicketRangeFrom");
    	$intTicketRangeUntil   = $this->getRequest()->getParam("TicketRangeUntil");

        switch ($this->getRequest()->getParam("type")) {
            case "Add":
                // Check Invalid characters
                if (preg_match("/[^\s\d\w]+/", $strTicketCategoryName)) {
                    echo "<script>window.parent.saveFailed('Please use only alphanumeric on Ticket Category Name!')</script>";
                    break;
                }

                // Check Invalid characters
                if (preg_match("/[^\d\.]+/", $intServiceLevel)) {
                	echo "<script>window.parent.saveFailed('Please use only numeric on Service Level!')</script>";
                	break;
                }

                $id = $this->model->insert($strTicketCategoryName, $strDescription, $intServiceLevel, $intTicketRangeFrom, $intTicketRangeUntil);
                if ($id) {
                    echo "<script>window.parent.saveSuccess('ID', $id)</script>";
                } else {
                    echo "<script>window.parent.saveFailed('Please fill all required fields first')</script>";
                }
                break;

            case "Edit":
                // Check Invalid characters
                if (preg_match("/[^\s\d\w]+/", $TicketCategoryName)) {
                    echo "<script>window.parent.saveFailed('Please use only alphanumeric on Ticket Category Name!')</script>";
                    break;
                }

                // Check Invalid characters
                if (preg_match("/[^\d.]+/", $intServiceLevel)) {
                	echo "<script>window.parent.saveFailed('Please use only numeric on Service Level!')</script>";
                	break;
                }

                // Check invalid range
                if ($intTicketRangeFrom >= $intTicketRangeUntil) {
                    echo "<script>window.parent.saveFailed('Invalid ticket number range!')</script>";
                	break;
                }

                // Check duplicate range
                $blnDuplicateRange = $this->model->checkDuplicateRange($intTicketRangeFrom, $intTicketRangeUntil, $this->getRequest()->getParam("ID"));
                if ($blnDuplicateRange === true) {
                    echo "<script>window.parent.saveFailed('Duplicate ticket number range!')</script>";
                	break;
                }

                $this->model->update(addslashes($this->getRequest()->getParam("ID")),
                        $strTicketCategoryName,
                		$strDescription,
                		$intServiceLevel,
                		$intTicketRangeFrom,
                		$intTicketRangeUntil);
                echo "<script>window.parent.editSuccess()</script>";
                break;

            case "Delete":
                $this->model->delete(addslashes($this->getRequest()->getParam("ID")));
                break;
        }
        exit;

    }
}

